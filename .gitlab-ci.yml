# This file is a template, and might need editing before it works on your project.
# An example .gitlab-ci.yml file to test (and optionally report the coverage
# results of) your [Julia][1] packages. Please refer to the [documentation][2]
# for more information about package development in Julia.
#
# Here, it is assumed that your Julia package is named `MyPackage`. Change it to
# whatever name you have given to your package.
#
# [1]: http://julialang.org/
# [2]: http://julia.readthedocs.org/

cache:
  untracked: true
  paths:
    - vendor/
    - vendor/apt
    - vendor/julia

# Below is the template to run your tests in Julia
.test_template: &test_6
  before_script:
    - mkdir -p vendor/apt
    - mkdir -p vendor/julia
    - apt-get update -yqq
    - apt-get update -qq && apt-get -o dir::cache::archives="vendor/apt" install -y -qq wget git gcc gfortran liblapack-dev libgmp-dev libglpk-dev cmake g++ build-essential pkg-config
    - mkdir -p /root/.julia/v0.6
    - cp -r vendor/julia/. /root/.julia/v0.6/
    - ls -a /root/.julia/v0.6/
    - rm -f /root/.julia/v0.6/.cache
    - ls -a /root/.julia/v0.6/

  script:
    # Let's run the tests. Substitute `coverage = false` below, if you do not
    # want coverage results.
    - julia -e 'Pkg.update();'
    - julia -e 'if "Juniper" in keys(Pkg.installed()) Pkg.rm("Juniper"); Pkg.rm("Juniper") end'
    - julia -e 'Pkg.clone(pwd());'
    - ls -a /root/.julia/v0.6/
    - julia -e 'Pkg.add("Ipopt")'
    - julia -e 'Pkg.test("Juniper",
      coverage = true)'
    # Comment out below if you do not want coverage results.
    - julia -e 'Pkg.add("Coverage"); cd(Pkg.dir("Juniper"));
      using Coverage; cl, tl = get_summary(process_folder());
      println("(", cl/tl*100, "%) covered")'
    - pwd
    - ls -a
    - cp -r /root/.julia/v0.6/. vendor/julia/


test:0.6.2:
  image: julia:0.6.2
  <<: *test_6

# REMARK: Do not forget to enable the coverage feature for your project, if you
# are using code coverage reporting above. This can be done by
#
# - Navigating to the `CI/CD Pipelines` settings of your project,
# - Copying and pasting the default `Simplecov` regex example provided, i.e.,
#   `\(\d+.\d+\%\) covered` in the `test coverage parsing` textfield.
#
# WARNING: This template is using the `julialang/julia` images from [Docker
# Hub][3]. One can use custom Julia images and/or the official ones found
# in the same place. However, care must be taken to correctly locate the binary
# file (`/opt/julia/bin/julia` above), which is usually given on the image's
# description page.
#
# [3]: http://hub.docker.com/
